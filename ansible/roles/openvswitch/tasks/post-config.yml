---
# NOTE(mnasiadka): external_ids:system-id uniquely identifies a physical system, used by OVN and other controllers
- name: Set system-id
  become: true
  command: docker exec openvswitch_vswitchd ovs-vsctl set Open_vSwitch . external_ids:system-id={{ openvswitch_system_id }}

- name: Compute facts for bridge and external interface names
  set_fact:
    neutron_bridge_name: "{{ neutron_networks | selectattr('external_interface', 'defined') | map(attribute='bridge_name') | join(',') }}"
    neutron_external_interface: "{{ neutron_networks | selectattr('external_interface', 'defined') | map(attribute='external_interface') | join(',') }}"
    neutron_bridge_patches: "{% for n in (neutron_networks | selectattr('patch_interface', 'defined')) %}{{ n.bridge_name }}:{{ n.patch_interface }}{% if not loop.last %},{% endif %}{% endfor %}"
  when: neutron_networks is defined

- name: Ensuring OVS bridge is properly setup
  become: true
  command: docker exec openvswitch_db /usr/local/bin/kolla_ensure_openvswitch_configured {{ item.0 }} {{ item.1 }}
  register: status
  changed_when: status.stdout.find('changed') != -1
  when:
    - inventory_hostname in groups["network"]
      or (inventory_hostname in groups["compute"] and computes_need_external_bridge | bool )
  with_together:
    - "{{ neutron_bridge_name.split(',') }}"
    - "{{ neutron_external_interface.split(',') }}"

- name: Ensuring OVS patches are properly setup
  command: docker exec openvswitch_db /usr/local/bin/kolla_ensure_openvswitch_patch_configured {{ item.split(':')[0] }} {{ item.split(':')[1] }}
  register: status
  changed_when: status.stdout.find('changed') != -1
  when:
    - inventory_hostname in groups["network"]
      or (inventory_hostname in groups["compute"] and computes_need_external_bridge | bool )
    - neutron_bridge_patches is defined
    - neutron_bridge_patches | length
    - item is search(":")
  with_items: "{{ neutron_bridge_patches.split(',') }}"
